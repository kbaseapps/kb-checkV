import os
import pandas as pd
import subprocess
import uuid
import zipfile

def generate_output_file_list(result_directory, shared_folder):
    """
    generate_output_file_list: zip result files and generate file_links for report
    """
    output_files = list()
    output_directory = os.path.join(shared_folder, str(uuid.uuid4()))
    os.mkdir(output_directory)
    result_file = os.path.join(output_directory, 'checkv_result.zip')

    with zipfile.ZipFile(result_file, 'w',
                         zipfile.ZIP_DEFLATED,
                         allowZip64=True) as zip_file:
        for file in os.listdir(result_directory):
            if file.endswith('.tsv'):
                    zip_file.write(os.path.join(result_directory, file))

    output_files.append({'path': result_file,
                         'name': os.path.basename(result_file),
                         'label': os.path.basename(result_file),
                         'description': 'File(s) generated by CheckV App'})

    return output_files


def generate_html_report(result_directory, shared_folder, dfu):
    """
    _generate_html_report: generate html summary report
    """
    html_report = list()
    # create new output dir in scratch to store html files
    output_directory = os.path.join(shared_folder, str(uuid.uuid4()))

    os.mkdir(output_directory)
    overview_content = ""
    # report_shock_id = dfu.file_to_shock({'file_path': output_directory,
    #                                      'pack': 'zip'})['shock_id']
    for file in os.listdir(result_directory):
        if file.endswith('.tsv'):
            result_file_path = os.path.join(output_directory, file[:-4] + ".html")
            # write tsv file to html file
            tsv_file = os.path.join(result_directory, file)
            qs = pd.read_csv(tsv_file, delimiter="\t")
            content = qs.to_html()
            overview_content += "<h3> %s report</h3>" % file[:-4]
            overview_content += content
            html = open(result_file_path, "w")
            html.write(content)
            html.close()
            # create html report
            report_shock_id = dfu.file_to_shock({'file_path': output_directory,
                                                 'pack': 'zip'})['shock_id']
            html_report.append({'shock_id': report_shock_id,
                                'name': os.path.basename(result_file_path),
                                'label': os.path.basename(result_file_path),
                                'description': 'HTML summary report for CheckV App'})
    overview_content_path = os.path.join(output_directory, "overview_content.html")
    overview_html = open(overview_content_path, "w")
    overview_html.write(overview_content)
    overview_html.close()
    report_shock_id = dfu.file_to_shock({'file_path': output_directory,
                                         'pack': 'zip'})['shock_id']
    html_report.append({'shock_id': report_shock_id,
                        'name': os.path.basename(overview_content_path),
                        'label': os.path.basename(overview_content_path),
                        'description': 'HTML summary report for CheckV App'})
    return html_report


def run_kb_checkv(output_dir):
    os.environ['CHECKVDB'] = "/kb/module/data/database/checkv-db-v0.6"
    input_file_path = "/opt/work/checkv/test/test_sequences.fna"

    print("Now running checkv end_to_end command")

    return subprocess.run(['checkv', 'end_to_end', input_file_path, output_dir, '-t', '16'],
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)